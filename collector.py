from web3 import Web3
import time
from eth_account import Account
import json
import csv
import os
import sys
import io
from datetime import datetime

# RPC
RPC_URL = "https://api.mainnet.abs.xyz"
w3 = Web3(Web3.HTTPProvider(RPC_URL))

def log_message(message: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    print(f"[{datetime.now().strftime('%H:%M:%S')}] {message}")
    sys.stdout.flush()

def get_address_from_private_key(private_key: str) -> str:
    if private_key.startswith('0x'):
        private_key = private_key[2:]
    account = Account.from_key(private_key)
    return account.address

def collect_eth(from_private_key: str, to_address: str):
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ ETH —Å –∞–¥—Ä–µ—Å–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if from_private_key.startswith('0x'):
            from_private_key = from_private_key[2:]
        account = Account.from_key(from_private_key)
        sender_address = account.address
        
        log_message(f"üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {sender_address}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = w3.eth.get_balance(sender_address)
        balance_eth = w3.from_wei(balance, 'ether')
        
        if balance_eth <= 0:
            log_message(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å")
            return False
            
        log_message(f"üí∞ –ù–∞–π–¥–µ–Ω–æ: {balance_eth} ETH")
        
        try:
            nonce = w3.eth.get_transaction_count(sender_address)
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ –≥–∞–∑–∞
            transaction = {
                'nonce': nonce,
                'to': Web3.to_checksum_address(to_address),
                'value': w3.to_wei(balance_eth, 'ether'),  # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å –±–∞–ª–∞–Ω—Å
                'chainId': 2741
            }
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≥–∞–∑
            gas_estimate = w3.eth.estimate_gas({
                'from': sender_address,
                'to': Web3.to_checksum_address(to_address),
                'value': w3.to_wei(balance_eth, 'ether')
            })
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≥–∞–∑–∞
            gas_price = w3.eth.gas_price
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–∑–∞
            gas_cost = w3.from_wei(gas_price * gas_estimate, 'ether')
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            amount_to_send = balance_eth - gas_cost
            
            if amount_to_send <= 0:
                log_message(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–∞–∑–∞")
                return False
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction['value'] = w3.to_wei(amount_to_send, 'ether')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–∞
            transaction.update({
                'gas': gas_estimate,
                'gasPrice': gas_price
            })
            
            log_message("‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
            signed = Account.sign_transaction(transaction, from_private_key)
            
            log_message("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
            tx_hash = w3.eth.send_raw_transaction(signed.raw_transaction)
            
            log_message("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
            receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
            
            log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ {amount_to_send} ETH")
            log_message(f"üîó –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {receipt['transactionHash'].hex()}")
            
            return True
            
        except Exception as e:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False
                
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def collect_from_csv(filename: str, destination_address: str):
    """–°–æ–±–∏—Ä–∞–µ—Ç ETH —Å–æ –≤—Å–µ—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ CSV"""
    log_message("üîÑ –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ —Å—Ä–µ–¥—Å—Ç–≤")
    
    if not os.path.exists(filename):
        log_message(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    total_collected = 0
    successful_transactions = 0
    
    try:
        with open(filename, 'r') as file:
            reader = csv.reader(file)
            next(reader, None)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            rows = list(reader)
            
            log_message(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(rows) * 2}")  # *2 —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Å—Ç–æ–ª–±—Ü–∞
            
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
            processed_keys = set()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Å—Ç–æ–ª–±—Ü–∞
            for row in rows:
                for private_key in row[:2]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
                    private_key = private_key.strip()
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
                    if private_key in processed_keys:
                        continue
                    
                    processed_keys.add(private_key)
                    
                    log_message(f"\n{'='*50}")
                    success = collect_eth(private_key, destination_address)
                    
                    if success:
                        successful_transactions += 1
                    
                    time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
            
            log_message(f"\n{'='*50}")
            log_message(f"‚ú® –°–±–æ—Ä —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            log_message(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {successful_transactions}")
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', write_through=True)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    log_message("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RPC...")
    if not w3.is_connected():
        log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC")
        sys.exit(1)
    log_message("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    
    # –ê–¥—Ä–µ—Å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ä–µ–¥—Å—Ç–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π)
    destination_address = "–í–ê–® –ê–î–†–ï–°"
    
    # –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ —Å—Ä–µ–¥—Å—Ç–≤
    collect_from_csv("wallets.csv", destination_address) 