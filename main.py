from web3 import Web3
import time
from eth_account import Account
import json
import csv
import os
import sys
import io
from datetime import datetime

# RPC
RPC_URL = "https://api.mainnet.abs.xyz"
w3 = Web3(Web3.HTTPProvider(RPC_URL))

def get_address_from_private_key(private_key: str) -> str:
    
    if private_key.startswith('0x'):
        private_key = private_key[2:]
    account = Account.from_key(private_key)
    return account.address

def send_eth(from_private_key: str, to_private_key: str, amount: float):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        to_address = get_address_from_private_key(to_private_key)
        
        if not w3.is_connected():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC")

        # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if from_private_key.startswith('0x'):
            from_private_key = from_private_key[2:]
        account = Account.from_key(from_private_key)
        sender_address = account.address
        
        log_message(f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_address}")
        log_message(f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {to_address}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        balance = w3.eth.get_balance(sender_address)
        balance_eth = w3.from_wei(balance, 'ether')
        log_message(f"üí∞ –ë–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {balance_eth} ETH")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
        if balance_eth < amount:
            raise Exception(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {amount} ETH, –¥–æ—Å—Ç—É–ø–Ω–æ {balance_eth} ETH")
        
        try:
            nonce = w3.eth.get_transaction_count(sender_address)
            log_message("üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ –≥–∞–∑–∞
            transaction = {
                'nonce': nonce,
                'to': Web3.to_checksum_address(to_address),
                'value': w3.to_wei(amount, 'ether'),
                'chainId': 2741
            }
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≥–∞–∑
            gas_estimate = w3.eth.estimate_gas({
                'from': sender_address,
                'to': Web3.to_checksum_address(to_address),
                'value': w3.to_wei(amount, 'ether')
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–∞
            transaction.update({
                'gas': gas_estimate,
                'gasPrice': w3.eth.gas_price
            })
            
            log_message("‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            signed = Account.sign_transaction(transaction, from_private_key)
            
            log_message("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
            tx_hash = w3.eth.send_raw_transaction(signed.raw_transaction)
            
            log_message("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
            log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {amount} ETH")
            log_message(f"üîó –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {receipt['transactionHash'].hex()}")
            
            return True
            
        except Exception as e:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False
                
    except Exception as e:
        log_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return False

def log_message(message: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    print(f"[{datetime.now().strftime('%H:%M:%S')}] {message}")
    sys.stdout.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥

def process_csv(filename: str, amount: float, start_from: int = 1):
    log_message("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV —Ñ–∞–π–ª–∞")
    if not os.path.exists(filename):
        log_message(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    with open(filename, 'r') as file:
        reader = csv.reader(file)
        next(reader, None)
        rows = list(reader)
        
        log_message(f"–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(rows)}")
        
        for index, row in enumerate(rows, 1):
            if index < start_from:
                continue
            if len(row) >= 2:
                from_private_key = row[0].strip()
                to_private_key = row[1].strip()
                
                log_message(f"\n{'='*50}")
                log_message(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {index}/{len(rows)}...")
                
                try:
                    success = send_eth(from_private_key, to_private_key, amount)
                    
                    if success:
                        log_message("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                    else:
                        log_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
                    
                    delay = 5
                    log_message(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π...")
                    sys.stdout.flush()
                    time.sleep(delay)
                    
                except Exception as e:
                    log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}")
                    continue

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', write_through=True)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    log_message("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RPC...")
    if not w3.is_connected():
        log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC")
        sys.exit(1)
    log_message("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC —É—Å–ø–µ—à–Ω–æ")
    
    csv_file = "wallets.csv"
    amount_to_send = 0.0031
    
    log_message(f"–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV —Å —Å—É–º–º–æ–π {amount_to_send} ETH –Ω–∞ –∞–¥—Ä–µ—Å")
    process_csv(csv_file, amount_to_send, start_from=1)
