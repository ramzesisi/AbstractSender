from web3 import Web3
import time
from eth_account import Account
import json
import csv
import os
import sys
import io
from datetime import datetime

def log_message(message: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    print(f"[{datetime.now().strftime('%H:%M:%S')}] {message}")
    sys.stdout.flush()

# RPC
RPC_URL = "https://api.mainnet.abs.xyz"
w3 = Web3(Web3.HTTPProvider(RPC_URL))

# –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
NFT_ADDRESS = Web3.to_checksum_address("0xa6c46c07f7f1966d772e29049175ebba26262513")

# –ó–∞–≥—Ä—É–∂–∞–µ–º ABI
with open('abi.json', 'r') as file:
    NFT_ABI = json.load(file)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
nft_contract = w3.eth.contract(address=NFT_ADDRESS, abi=NFT_ABI)

def get_address_from_private_key(private_key: str) -> str:
    if private_key.startswith('0x'):
        private_key = private_key[2:]
    account = Account.from_key(private_key)
    return account.address

def transfer_nft(from_private_key: str, to_address: str):
    try:
        if from_private_key.startswith('0x'):
            from_private_key = from_private_key[2:]
        account = Account.from_key(from_private_key)
        sender_address = account.address
        
        log_message(f"üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ NFT –Ω–∞ –∞–¥—Ä–µ—Å–µ: {sender_address}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å NFT
        balance = nft_contract.functions.balanceOf(sender_address).call()
        
        if balance <= 0:
            log_message(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç NFT –Ω–∞ –∞–¥—Ä–µ—Å–µ")
            return False
            
        log_message(f"üí∞ –ù–∞–π–¥–µ–Ω–æ NFT: {balance}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ tokensOfOwner
            token_ids = nft_contract.functions.tokensOfOwner(sender_address).call()
            
            if not token_ids:
                log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ NFT")
                return False
                
            log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ NFT: {len(token_ids)}")
            
            for token_id in token_ids:
                # –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º approve
                nonce = w3.eth.get_transaction_count(sender_address)
                
                approve_tx = nft_contract.functions.approve(
                    Web3.to_checksum_address(to_address),
                    token_id
                ).build_transaction({
                    'chainId': 2741,
                    'gas': 0,
                    'gasPrice': w3.eth.gas_price,
                    'nonce': nonce,
                })
                
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≥–∞–∑ –¥–ª—è approve
                gas_estimate = w3.eth.estimate_gas({
                    'from': sender_address,
                    'to': NFT_ADDRESS,
                    'data': approve_tx['data']
                })
                
                approve_tx.update({'gas': gas_estimate})
                
                log_message(f"‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è NFT #{token_id}...")
                signed = Account.sign_transaction(approve_tx, from_private_key)
                
                log_message("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...")
                tx_hash = w3.eth.send_raw_transaction(signed.raw_transaction)
                
                log_message("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...")
                receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
                
                log_message("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")
                time.sleep(0.1)
                
                # –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º transferFrom
                nonce = w3.eth.get_transaction_count(sender_address)
                
                transfer_tx = nft_contract.functions.transferFrom(
                    sender_address,
                    Web3.to_checksum_address(to_address),
                    token_id
                ).build_transaction({
                    'chainId': 2741,
                    'gas': 0,
                    'gasPrice': w3.eth.gas_price,
                    'nonce': nonce,
                })
                
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≥–∞–∑
                gas_estimate = w3.eth.estimate_gas({
                    'from': sender_address,
                    'to': NFT_ADDRESS,
                    'data': transfer_tx['data']
                })
                
                transfer_tx.update({'gas': gas_estimate})
                
                log_message(f"‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è NFT #{token_id}...")
                signed = Account.sign_transaction(transfer_tx, from_private_key)
                
                log_message("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
                tx_hash = w3.eth.send_raw_transaction(signed.raw_transaction)
                
                log_message("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
                receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
                
                log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω NFT #{token_id}")
                log_message(f"üîó –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {receipt['transactionHash'].hex()}")
                
                time.sleep(0.1)
            
            return True
            
        except Exception as e:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False
                
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def collect_nfts_from_csv(filename: str, destination_address: str):
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ NFT —Å–æ –≤—Å–µ—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ CSV"""
    log_message("üîÑ –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ NFT")
    
    if not os.path.exists(filename):
        log_message(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    successful_transactions = 0
    
    try:
        with open(filename, 'r') as file:
            reader = csv.reader(file)
            next(reader, None)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            rows = list(reader)
            
            log_message(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(rows) * 2}")
            
            processed_keys = set()
            
            for row in rows:
                for private_key in row[:2]:
                    private_key = private_key.strip()
                    
                    if private_key in processed_keys:
                        continue
                    
                    processed_keys.add(private_key)
                    
                    log_message(f"\n{'='*50}")
                    success = transfer_nft(private_key, destination_address)
                    
                    if success:
                        successful_transactions += 1
                    
                    time.sleep(0.2)
            
            log_message(f"\n{'='*50}")
            log_message(f"‚ú® –°–±–æ—Ä NFT –∑–∞–≤–µ—Ä—à–µ–Ω")
            log_message(f"üìä –£—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {successful_transactions}")
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', write_through=True)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    log_message("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RPC...")
    if not w3.is_connected():
        log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC")
        sys.exit(1)
    log_message("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    
    # –ê–¥—Ä–µ—Å –¥–ª—è —Å–±–æ—Ä–∞ NFT
    destination_address = "–í–ê–® –ê–î–†–ï–°"
    
    # –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ NFT
    collect_nfts_from_csv("wallets.csv", destination_address) 